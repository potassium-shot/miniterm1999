const tau: f32 = 6.28318530718;

const directions: f32 = 32.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
const quality: f32 = 0.088888; // BLUR QUALITY (Default 4.0 - More is better but slower)
const size: f32 = 25.0; // BLUR SIZE (Radius)

fn fx(coords: vec2<f32>, uv: vec2<f32>, p: ShaderParam) -> vec4<f32> {
	let radius: vec2<f32> = vec2(size / f32(p.screen_size.x), size / f32(p.screen_size.y));
    
	let this_color = screen_color(uv);
    var color: vec4<f32> = this_color;
    
    for(var d=0.0; d<tau; d+=tau/directions)
    {
		for(var i=quality; i<=1.0; i+=quality)
        {
			color += screen_color(uv+vec2(cos(d),sin(d))*radius*i);
        }
    }
    
    color /= 1.0/quality * directions - 180.0;
    return color + this_color;
}
